from aiogram import Bot, Dispatcher, executor, types
from magic_filter import F
from calc_operations import bmi_calc, rec_mass_calc, calorie_calc
import db
import kb

API_TOKEN = ''

dp = Dispatcher(Bot(API_TOKEN))

user_data = {}


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    new_user = db.check_new_user(message.chat.id)
    if new_user:
        db.add_new_user(message.chat.id, message.chat.full_name, 'not specified', 0, 0.0, 0, 'not specified')
    user_params = db.get_user_params(message.chat.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç <b>{user_params[1]}</b>! üëã\n"
        "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Å–∞ üçΩÔ∏è‚ú®\n"
        "–î–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –≤—Å–µ —Ç—É—Ç —É—Å—Ç—Ä–æ–µ–Ω–æ, —ç—Ç–∞–∫–∞—è ¬´–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫—É—Ö–Ω—è¬ª üë®‚Äçüç≥üî•:\n\n"
        "–ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø <i>–ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è</i>.\n"
        "–ü–æ—Ä—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 5-6 –Ω–µ–±–æ–ª—å—à–∏—Ö –∏ "
        "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Ä—Ü–∏–π. –û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ ¬´—Ä–∞–∑–æ–≥–Ω–∞—Ç—å¬ª "
        "–º–µ—Ç–∞–±–æ–ª–∏–∑–º, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ "
        "–∑–¥–æ—Ä–æ–≤—å—è –∏ —Ñ–∏—Ç–Ω–µ—Å–∞. ü•¶üçé\n\n"
        "\"–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\" ‚Äî –∑–≤—É—á–∏—Ç —Å–ª–æ–∂–Ω–æ –∏ —Å—Ç—Ä–∞—à–Ω–æ, –ø—Ä–∞–≤–¥–∞ –≤–µ–¥—å?\n"
        "–ó–±–∞–≥–æ–π—Å—Ç–≤–∏–µ, —Ç–æ–ª—å–∫–æ –∑–±–∞–≥–æ–π—Å—Ç–≤–∏–µ üê®. –Ø —Ç–µ–±–µ –≤ —ç—Ç–æ–º –ø–æ–º–æ–≥—É üòâ\n\n"
        "üìù –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω-–ñ–µ–æ—Ä–∞, –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç —Ç–µ–±—è:\n"
        "1Ô∏è‚É£ –ü–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)\n"
        "2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö)\n"
        "3Ô∏è‚É£ –í–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö)\n"
        "4Ô∏è‚É£ –†–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö)\n"
        "5Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—Ç —Å–∏–¥—è—á–µ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –¥–æ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n\n"
        "–°–æ–±—Ä–∞–≤ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, —è —Å–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å "
        "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –≠—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π. üí™üí°\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —ç—Ç–æ—Ç –ø—É—Ç—å –≤–º–µ—Å—Ç–µ? –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∏ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –¥–µ–ª—É! üåüüòä\n\n"
        f"<i>–ü–æ–ª</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[2] == 'not specified' else user_params[2]}</b>\n"
        f"<i>–í–æ–∑—Ä–∞—Å—Ç</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[3] == 0 else user_params[3]}</b>\n"
        f"<i>–í–µ—Å</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[4] == 0.0 else user_params[4]}</b>\n"
        f"<i>–†–æ—Å—Ç</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[5] == 0 else user_params[5]}</b>\n"
        f"<i>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</i>: "
        f"<b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[6] == 'not specified' else user_params[6]}</b>\n",
        parse_mode='HTML',
        reply_markup=kb.get_kb_menu()
    )


async def update_params(message: types.Message, new_value):
    if user_data.get(message.chat.id)[1] == "set_param_age":
        await message.edit_text(
            f"–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç: {new_value[0]}",
            reply_markup=kb.get_kb_height()
        )
    elif user_data.get(message.chat.id)[1] == "set_param_weight":
        await message.edit_text(
            f"–£–∫–∞–∂–∏ –≤–µ—Å: {round(new_value[0], 1)} –∫–≥",
            reply_markup=kb.get_kb_weight()
        )
    elif user_data.get(message.chat.id)[1] == "set_param_height":
        await message.edit_text(
            f"–£–∫–∞–∂–∏ —Ä–æ—Å—Ç: {new_value[0]} —Å–º",
            reply_markup=kb.get_kb_height()
        )


@dp.callback_query_handler(
    lambda c: c.data == "set_param_gender" or c.data == "set_param_age" or c.data == "set_param_weight" or
    c.data == "set_param_height" or c.data == "set_param_activity" or c.data == "male" or c.data == "female" or
    c.data == "low_act" or c.data == "below_average_act" or c.data == "average_act" or c.data == "above_average_act" or
    c.data == "high_act")
async def cmd_params(callback: types.CallbackQuery):
    if callback.data == "set_param_gender":
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏ –ø–æ–ª:",
            reply_markup=kb.get_kb_gender()
        )
    elif callback.data == "set_param_age":
        value = db.get_user_params(callback.from_user.id)[3]
        if value == 0:
            value += 20
        user_data[callback.message.chat.id] = [value, callback.data]
        await callback.message.edit_text(
            f"–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç: {user_data.get(callback.message.chat.id)[0]}",
            reply_markup=kb.get_kb_height()
        )
    elif callback.data == "set_param_weight":
        value = db.get_user_params(callback.from_user.id)[4]
        if value == 0.0:
            value += 68
        user_data[callback.message.chat.id] = [value, callback.data]
        await callback.message.edit_text(
            f"–£–∫–∞–∂–∏ –≤–µ—Å: {user_data.get(callback.message.chat.id)[0]} –∫–≥",
            reply_markup=kb.get_kb_weight()
        )
    elif callback.data == "set_param_height":
        value = db.get_user_params(callback.from_user.id)[5]
        if value == 0:
            value += 165
        user_data[callback.message.chat.id] = [value, callback.data]
        await callback.message.edit_text(
            f"–£–∫–∞–∂–∏ —Ä–æ—Å—Ç: {user_data.get(callback.message.chat.id)[0]} —Å–º",
            reply_markup=kb.get_kb_height()
        )
    elif callback.data == "set_param_activity":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
            "–ù–∏–∑–∫–∏–π ‚Äî –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –∏ —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞\n"
            "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –µ—Å–ª–∏ —Ç—ã —Å–æ–≤–µ—Ä—à–∞–µ—à—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏ –∏–ª–∏ –¥–µ–ª–∞–µ—à—å –ª–µ–≥–∫—É—é –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É 1‚Äì3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
            "–°—Ä–µ–¥–Ω–∏–π ‚Äî –µ—Å–ª–∏ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏ 3‚Äì5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
            "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –µ—Å–ª–∏ —Ç—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è 6‚Äì7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
            "–í—ã—Å–æ–∫–∏–π ‚Äî –µ—Å–ª–∏ —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Ç—Ä—É–¥–æ–º, —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –∏ "
            "–≤–∫–ª—é—á–∞–µ—à—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            reply_markup=kb.get_kb_activity()
        )
    elif callback.data == "male":
        await callback.message.delete()
        db.change_user_params(callback.message.chat.id, gender='–ú—É–∂—Å–∫–æ–π')
        await send_welcome(callback.message)
    elif callback.data == "female":
        await callback.message.delete()
        db.change_user_params(callback.message.chat.id, gender='–ñ–µ–Ω—Å–∫–∏–π')
        await send_welcome(callback.message)
    elif callback.data == "low_act":
        await callback.message.delete()
        db.change_user_params(callback.message.chat.id, activity='–ù–∏–∑–∫–∏–π')
        await send_welcome(callback.message)
    elif callback.data == "below_average_act":
        await callback.message.delete()
        db.change_user_params(callback.message.chat.id, activity='–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ')
        await send_welcome(callback.message)
    elif callback.data == "average_act":
        await callback.message.delete()
        db.change_user_params(callback.message.chat.id, activity='–°—Ä–µ–¥–Ω–∏–π')
        await send_welcome(callback.message)
    elif callback.data == "above_average_act":
        await callback.message.delete()
        db.change_user_params(callback.message.chat.id, activity='–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ')
        await send_welcome(callback.message)
    elif callback.data == "high_act":
        await callback.message.delete()
        db.change_user_params(callback.message.chat.id, activity='–í—ã—Å–æ–∫–∏–π')
        await send_welcome(callback.message)


@dp.callback_query_handler(F.data.startswith("num_"))
async def callbacks_num(callback: types.CallbackQuery):
    user_value = user_data.get(callback.message.chat.id)
    action = callback.data.split("_")[1]

    if action == "incr01":
        user_data[callback.message.chat.id] = [user_value[0] + 0.1, user_value[1]]
        await update_params(callback.message, [user_value[0] + 0.1, user_value[1]])
    elif action == "incr1":
        user_data[callback.message.chat.id] = [user_value[0] + 1, user_value[1]]
        await update_params(callback.message, [user_value[0] + 1, user_value[1]])
    elif action == "incr5":
        user_data[callback.message.chat.id] = [user_value[0] + 5, user_value[1]]
        await update_params(callback.message, [user_value[0] + 5, user_value[1]])
    elif action == "incr10":
        user_data[callback.message.chat.id] = [user_value[0] + 10, user_value[1]]
        await update_params(callback.message, [user_value[0] + 10, user_value[1]])
    elif action == "decr01":
        user_data[callback.message.chat.id] = [user_value[0] - 0.1, user_value[1]]
        await update_params(callback.message, [user_value[0] - 0.1, user_value[1]])
    elif action == "decr1":
        user_data[callback.message.chat.id] = [user_value[0] - 1, user_value[1]]
        await update_params(callback.message, [user_value[0] - 1, user_value[1]])
    elif action == "decr5":
        user_data[callback.message.chat.id] = [user_value[0] - 5, user_value[1]]
        await update_params(callback.message, [user_value[0] - 5, user_value[1]])
    elif action == "decr10":
        user_data[callback.message.chat.id] = [user_value[0] - 10, user_value[1]]
        await update_params(callback.message, [user_value[0] - 10, user_value[1]])
    elif action == "finish":
        await callback.message.delete()
        if user_data.get(callback.message.chat.id)[1] == "set_param_age":
            age = user_data.get(callback.message.chat.id)[0]
            db.change_user_params(callback.message.chat.id, age=age)
            del user_data[callback.message.chat.id]
        elif user_data.get(callback.message.chat.id)[1] == "set_param_height":
            height = user_data.get(callback.message.chat.id)[0]
            db.change_user_params(callback.message.chat.id, height=height)
            del user_data[callback.message.chat.id]
        elif user_data.get(callback.message.chat.id)[1] == "set_param_weight":
            weight = round(user_data.get(callback.message.chat.id)[0], 1)
            db.change_user_params(callback.message.chat.id, weight=weight)
            del user_data[callback.message.chat.id]
        await send_welcome(callback.message)

    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == "params_complete")
async def alert(callback: types.CallbackQuery):
    user_params = db.get_user_params(callback.message.chat.id)
    bmi = bmi_calc(user_params[5], user_params[4])
    rec_mass = rec_mass_calc(user_params[5])
    calorie = calorie_calc(user_params[2], user_params[3], user_params[4], user_params[5], user_params[6])
    await callback.message.edit_text(
        f"–¢–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
        f"<i>–ü–æ–ª</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[2] == 'not specified' else user_params[2]}</b>\n"
        f"<i>–í–æ–∑—Ä–∞—Å—Ç</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[3] == 0 else user_params[3]}</b>\n"
        f"<i>–í–µ—Å</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[4] == 0.0 else user_params[4]}</b>\n"
        f"<i>–†–æ—Å—Ç</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[5] == 0 else user_params[5]}</b>\n"
        f"<i>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</i>: "
        f"<b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[6] == 'not specified' else user_params[6]}</b>\n\n"
        f"–¢–≤–æ–π –ò–ú–¢:  <b>{'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' if bmi is None else bmi}</b> <i>–∫–≥/–º¬≤</i>,"
        f"–Ω–æ—Ä–º–∞: –æ—Ç 18.5 –¥–æ 25 <i>–∫–≥/–º¬≤</i>\n"
        f"–ù–æ—Ä–º–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞: <b>{'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' if rec_mass is None else rec_mass[0]}</b>"
        f" - <b>{'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' if rec_mass is None else rec_mass[1]}</b> <i>–∫–≥</i>\n\n"
        f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è <b><i>–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞</i></b>: <b>{calorie}</b> <i>–∫–∫–∞–ª</i>\n"
        f"–° –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å —ç—Ç–æ –±—É–¥–µ—Ç <b>{round(calorie/5, 1)}</b> <i>–∫–∫–∞–ª</i> –∑–∞ 1 –ø—Ä–∏–µ–º –ø–∏—â–∏, "
        f"6 —Ä–∞–∑ - <b>{round(calorie/6, 1)}</b> <i>–∫–∫–∞–ª</i>\n\n"
        "<i>–ï—Å–ª–∏ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –º–µ–¥–ª–µ–Ω–Ω—É—é, –∞ –∑–Ω–∞—á–∏—Ç, –Ω–µ –æ–ø–∞—Å–Ω—É—é –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ç–µ—Ä—é –≤–µ—Å–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–Ω–æ "
        "—É–º–µ–Ω—å—à–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 250 –∫–∫–∞–ª. –ï—Å–ª–∏ –∂–µ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ö—É–¥–µ—Ç—å –±—ã—Å—Ç—Ä–µ–µ, —Å–Ω–∏–∂–∞–π ¬´–∫–∞–ª–æ—Ä–∞–∂¬ª –Ω–∞ 500 –µ–¥–∏–Ω–∏—Ü. –ù–æ "
        "–ø–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å–Ω–∏–∂–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –∫–∞–ª–æ—Ä–∏–π –Ω–∏–∂–µ 1 200 –¥–ª—è –∂–µ–Ω—â–∏–Ω –∏ 1 400 –¥–ª—è –º—É–∂—á–∏–Ω.</i>\n\n"
        "–•–æ—á–µ—à—å –µ—â–µ –±–æ–ª—å—à–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞?\n"
        "<a href='https://www.youtube.com/@Freshlife28'>Freshlife28</a> –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à –≤ —ç—Ç–æ–º. "
        "–í–æ—Ç –æ–¥–∏–Ω –∏–∑ –µ–≥–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π –ø–æ ¬´–æ–±–º–µ–Ω–∫–µ¬ª:\n\n"
        "<b>–ë–µ–ª–∫–∏ÃÅ</b>: <i>–∫—É—Ä–∏—Ü–∞, –∏–Ω–¥–µ–π–∫–∞ (–≥—Ä—É–¥–∫–∏), –≥–æ–≤—è–¥–∏–Ω–∞, —Ç–≤–æ—Ä–æ–≥ 0%, —è–∏—á–Ω—ã–π –±–µ–ª–æ–∫ –±–µ–∑ –∂–µ–ª—Ç–∫–∞, —Ä—ã–±–∞</i>\n"
        "<b><i>–ù–µ –±–æ–ª—å—à–µ —á–µ–º 1,5–≥ –Ω–∞ –º–∞—Å—Å—É —Ç–µ–ª–∞, –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.</i></b>\n\n"
        "<b>–ñ–∏—Ä—ã</b>: <i>–∂–∏–≤–æ—Ç–Ω–æ–µ –∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –º–∞—Å–ª–æ, —Å–∞–ª–æ</i>\n"
        "<b><i>–ù–µ –±–æ–ª—å—à–µ —á–µ–º 0,5–≥ –Ω–∞ –º–∞—Å—Å—É —Ç–µ–ª–∞ (—ç—Ç–æ –û–º–µ–≥–∞3 –∏ –û–º–µ–≥–∞6 –¥–ª—è —Ä–∞–±–æ—Ç—ã —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)</i></b>\n\n"
        "<b>–£–≥–ª–µ–≤–æ–¥—ã</b>: <i>–∫—Ä—É–ø—ã (–æ–≤—Å—è–Ω–∫–∞, –≥—Ä–µ—á–∞, —Ä–∏—Å), –≤—Å–µ —Å–ª–∞–¥–∫–æ–µ, –≤—Å–µ –º—É—á–Ω–æ–µ</i>\n\n"
        ".               –£–≥–ª–µ–≤–æ–¥—ã\n"
        ".             /          |         \\\n"
        ".           /            |           \\\n"
        ".     –ø—Ä–æ—Å—Ç—ã–µ    |  —Å–ª–æ–∂–Ω—ã–µ\n"
        ".  –≤—Å–µ —Å–ª–∞–¥–∫–æ–µ|  –∫—Ä—É–ø—ã\n"
        ".  –≤—Å–µ –º—É—á–Ω–æ–µ  |  –º–∞–∫–∞—Ä–æ–Ω—ã (—Ç–≤–µ—Ä–¥—ã–µ —Å–æ—Ä—Ç–∞)\n\n"
        "–£–≥–ª–µ–≤–æ–¥—ã (–ø—Ä–æ—Å—Ç—ã–µ) ‚Üí –∏–Ω—Å—É–ª–∏–Ω‚Å†‚ÜóÔ∏è ‚Üí –ñ–ò–†‚òπÔ∏è\n"
        "–£–≥–ª–µ–≤–æ–¥—ã (—Å–ª–æ–∂–Ω—ã–µ) ‚Üí —ç–Ω–µ—Ä–≥–∏—è‚ÜóÔ∏è ‚Üí ‚ò∫Ô∏è\n",
        parse_mode='HTML',
        reply_markup=kb.get_kb_dietary_ration()
    )


if __name__ == '__main__':
    db.init()
    executor.start_polling(dp, skip_updates=True)
