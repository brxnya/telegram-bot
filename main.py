from aiogram import Bot, Dispatcher, executor, types
from magic_filter import F
import db
import kb

API_TOKEN = ''

dp = Dispatcher(Bot(API_TOKEN))

user_data = {}


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    new_user = db.check_new_user(message.chat.id)
    if new_user:
        db.add_new_user(message.chat.id, message.chat.full_name, 'not specified', 0, 0.0, 0.0, 'not specified')
    user_params = db.get_user_params(message.chat.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç <b>{user_params[1]}</b>! üëã\n"
        "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Å–∞ üçΩÔ∏è‚ú®\n"
        "–î–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –≤—Å–µ —Ç—É—Ç —É—Å—Ç—Ä–æ–µ–Ω–æ, —ç—Ç–∞–∫–∞—è \"–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫—É—Ö–Ω—è\" üë®‚Äçüç≥üî•:\n\n"
        "–ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø <i>–ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è</i>.\n"
        "–ü–æ—Ä—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 5-6 –Ω–µ–±–æ–ª—å—à–∏—Ö –∏ "
        "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Ä—Ü–∏–π. –û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ "
        "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ "
        "—Ñ–∏—Ç–Ω–µ—Å–∞. ü•¶üçé\n\n"
        "\"–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\" ‚Äî –∑–≤—É—á–∏—Ç —Å–ª–æ–∂–Ω–æ –∏ —Å—Ç—Ä–∞—à–Ω–æ, –ø—Ä–∞–≤–¥–∞ –≤–µ–¥—å?\n"
        "–ó–±–∞–≥–æ–π—Å—Ç–≤–∏–µ, —Ç–æ–ª—å–∫–æ –∑–±–∞–≥–æ–π—Å—Ç–≤–∏–µ üê®. –Ø —Ç–µ–±–µ –≤ —ç—Ç–æ–º –ø–æ–º–æ–≥—É üòâ\n\n"
        "üìù –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω-–ñ–µ–æ—Ä–∞, –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç —Ç–µ–±—è:\n"
        "1Ô∏è‚É£ –ü–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)\n"
        "2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö)\n"
        "3Ô∏è‚É£ –í–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö)\n"
        "4Ô∏è‚É£ –†–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö)\n"
        "5Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—Ç —Å–∏–¥—è—á–µ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –¥–æ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n\n"
        "–°–æ–±—Ä–∞–≤ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, —è —Å–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å "
        "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –≠—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π. üí™üí°\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —ç—Ç–æ—Ç –ø—É—Ç—å –≤–º–µ—Å—Ç–µ? –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∏ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –¥–µ–ª—É! üåüüòä\n\n"
        f"<i>–ü–æ–ª</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[2] == 'not specified' else user_params[2]}</b>\n"
        f"<i>–í–æ–∑—Ä–∞—Å—Ç</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[3] == 0 else user_params[3]}</b>\n"
        f"<i>–í–µ—Å</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[4] == 0.0 else user_params[4]}</b> <i>–∫–≥</i>\n"
        f"<i>–†–æ—Å—Ç</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[5] == 0.0 else user_params[5]}</b> <i>—Å–º</i>\n"
        f"<i>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</i>: "
        f"<b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[6] == 'not specified' else user_params[6]}</b>\n",
        parse_mode='HTML',
        reply_markup=kb.menu
    )


async def update_param(message: types.Message, new_value):
    await message.edit_text(
        f"–ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {round(new_value[0], 1)}",
        reply_markup=kb.get_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == "set_param_height" or c.data == "set_param_weight")
async def cmd_param(callback: types.CallbackQuery):
    if callback.data == "set_param_height":
        user_data[callback.message.chat.id] = [db.get_user_params(callback.from_user.id)[3] + 160, callback.data]
    elif callback.data == "set_param_weight":
        user_data[callback.message.chat.id] = [db.get_user_params(callback.from_user.id)[2] + 70, callback.data]
    await callback.message.edit_text(
        f"–ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {user_data.get(callback.message.chat.id)[0]}",
        reply_markup=kb.get_keyboard()
    )


@dp.callback_query_handler(F.data.startswith("num_"))
async def callbacks_num(callback: types.CallbackQuery):
    user_value = user_data.get(callback.message.chat.id)
    action = callback.data.split("_")[1]

    if action == "incr01":
        user_data[callback.message.chat.id] = [user_value[0] + 0.1, user_value[1]]
        await update_param(callback.message, [user_value[0] + 0.1, user_value[1]])
    elif action == "incr1":
        user_data[callback.message.chat.id] = [user_value[0] + 1, user_value[1]]
        await update_param(callback.message, [user_value[0] + 1, user_value[1]])
    elif action == "incr5":
        user_data[callback.message.chat.id] = [user_value[0] + 5, user_value[1]]
        await update_param(callback.message, [user_value[0] + 5, user_value[1]])
    elif action == "incr10":
        user_data[callback.message.chat.id] = [user_value[0] + 10, user_value[1]]
        await update_param(callback.message, [user_value[0] + 10, user_value[1]])
    elif action == "decr01":
        user_data[callback.message.chat.id] = [user_value[0] - 0.1, user_value[1]]
        await update_param(callback.message, [user_value[0] - 0.1, user_value[1]])
    elif action == "decr1":
        user_data[callback.message.chat.id] = [user_value[0] - 1, user_value[1]]
        await update_param(callback.message, [user_value[0] - 1, user_value[1]])
    elif action == "decr5":
        user_data[callback.message.chat.id] = [user_value[0] - 5, user_value[1]]
        await update_param(callback.message, [user_value[0] - 5, user_value[1]])
    elif action == "decr10":
        user_data[callback.message.chat.id] = [user_value[0] - 10, user_value[1]]
        await update_param(callback.message, [user_value[0] - 10, user_value[1]])
    elif action == "finish":
        await callback.message.delete()
        if user_data.get(callback.message.chat.id)[1] == "set_param_height":
            height = round(user_data.get(callback.message.chat.id)[0], 1)
            db.change_user_params(callback.message.chat.id, height=height)
            del user_data[callback.message.chat.id]
        elif user_data.get(callback.message.chat.id)[1] == "set_param_weight":
            weight = round(user_data.get(callback.message.chat.id)[0], 1)
            db.change_user_params(callback.message.chat.id, weight=weight)
            del user_data[callback.message.chat.id]
        await send_welcome(callback.message)

    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == "params_activity")
async def alter_physical_activity(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f""
    )


@dp.callback_query_handler(lambda c: c.data == "params_complete")
async def alert(callback: types.CallbackQuery):
    user_params = db.get_user_params(callback.message.chat.id)
    bmi = round(user_params[2]/(user_params[3]/100)**2, 1)
    rec_mass1 = round(18.5 * (user_params[3]/100)**2, 1)
    rec_mass2 = round(25.0 * (user_params[3]/100)**2, 1)
    await callback.message.edit_text(
        f"<i>–†–æ—Å—Ç</i>:    <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[3] == 0.0 else user_params[3]}</b> <i>—Å–º</i>\n"
        f"<i>–í–µ—Å</i>:      <b>{'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' if user_params[2] == 0.0 else user_params[2]}</b> <i>–∫–≥</i>\n\n"
        f"–¢–≤–æ–π –ò–ú–¢:  <b>{bmi}</b> <i>–∫–≥/–º¬≤</i>, –Ω–æ—Ä–º–∞: –æ—Ç 18.5 –¥–æ 25 <i>–∫–≥/–º¬≤</i>\n"
        f"–ù–æ—Ä–º–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞: <b>{rec_mass1}</b> - <b>{rec_mass2}</b> <i>–∫–≥</i>",
        parse_mode='HTML',
    )

if __name__ == '__main__':
    db.init()
    executor.start_polling(dp, skip_updates=True)
